{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["imageUpdate","e","setImageFile","setImageURL","setDisplayImage","preventDefault","reader","FileReader","file","target","files","onloadend","result","readAsDataURL","CardImage","src","displayImage","height","NewCard","userCards","setUserCards","useState","imageURL","cardName","setCardName","cardNote","setCardNote","className","Typography","variant","style","paddingBottom","Button","component","type","hidden","onChange","accept","TextField","id","label","value","multiline","rows","color","onClick","cards","JSON","parse","localStorage","getItem","push","setItem","stringify","err","alert","pop","addNewCardToStorage","YourCards","map","card","Card","CardActionArea","title","CardContent","gutterBottom","App","AppBar","position","Toolbar","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81d62a54.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport './App.css';\n\nfunction imageUpdate( e, setImageFile, setImageURL, setDisplayImage ) {\n  e.preventDefault();\n\n  let reader = new FileReader();\n  let file = e.target.files[0];\n  reader.onloadend = () => {\n    setImageFile(file);\n    setImageURL(reader.result);\n    setDisplayImage(true);\n  };\n  reader.readAsDataURL(file);\n}\n\nfunction CardImage( {src, displayImage} ) {\n\n  if ( displayImage===true ) {\n    return (\n      <>\n        <img src={src} height={200} />\n      </>\n    )\n  } else {\n    return (<></> );\n  }\n\n}\n\nfunction addNewCardToStorage( imageURL,cardName,cardNote,setUserCards ) {\n  \n  let cards = JSON.parse(localStorage.getItem('userCards'));\n  if ( cards==null ){\n    cards = [];\n  }\n  cards.push({imageURL,cardName,cardNote});\n  try {\n    localStorage.setItem('userCards',JSON.stringify(cards));\n  } catch(err) {\n    alert( 'Limit Full' );\n    cards.pop();\n    return null;\n  }\n  alert(\"Card Added Successfully\");\n  setUserCards(cards);\n  return null;\n}\n\nfunction NewCard( {userCards,setUserCards} ) {\n\n  const [image,setImage] = useState(null,imageUpdate);\n  const [imageFile,setImageFile] = useState('');\n  const [imageURL,setImageURL] = useState('');\n  const [displayImage,setDisplayImage] = useState(false);\n  const [cardName,setCardName] = useState('');\n  const [cardNote,setCardNote] = useState('');\n\n  return (\n    <div className=\"newCard\">\n\n      <Typography variant=\"h4\" style={{ paddingBottom: '20px'}} >\n        Add a new Card\n      </Typography>\n\n      <Button variant=\"contained\" component=\"label\" >\n        Upload Card image\n        <input type=\"file\" hidden onChange={(e) => imageUpdate(e,setImageFile,setImageURL,setDisplayImage) } accept=\"image/*\"/>\n      </Button>\n\n      <br/>\n  \n      <form className=\"NewCard__form\" >\n        <CardImage src={imageURL} displayImage={displayImage} />\n          <br /><br />\n        <TextField id=\"name\" label=\"Name\" variant=\"outlined\" \n          onChange={(e) => {setCardName(e.target.value)} } />\n          <br /><br />\n        <TextField id=\"note\" label=\"Note\" variant=\"outlined\" multiline rows={4} \n          onChange={(e) => {setCardNote(e.target.value)} } />\n          <br /><br />\n        <Button variant=\"contained\" component=\"label\" color=\"primary\"\n          onClick={ (e) => {addNewCardToStorage( imageURL,cardName,cardNote,setUserCards )} }\n        > \n          Add Card </Button>\n\n      </form>\n\n    </div>\n  );\n\n}\n\nfunction YourCards( {userCards} ) {\n  \n  if ( userCards==null ){\n    userCards = [];\n  }\n  return (\n      <div className=\"yourCards\" >\n       <Typography variant=\"h4\">\n        Your Cards\n      </Typography>\n\n      <div className=\"yourCards__list\">\n        { userCards.map( (card) => {\n          return (\n            <Card className=\"yourCards__Card\">\n              <CardActionArea>\n                <img\n                  className=\"yourCards__Card--CardMedia\"\n                  src={card['imageURL']}\n                  title={card['cardName']}\n                />\n              </CardActionArea>\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {card['cardName']}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {card['cardNote']}\n              </Typography>\n            </CardContent>\n            </Card>\n          )\n        } ) }\n      </div>\n      </div>\n  )\n}\n\nfunction App() {\n  const [userCards,setUserCards] = useState( JSON.parse(localStorage.getItem('userCards')) );\n\n  return (\n    <div className=\"App\">\n\n      <AppBar position=\"static\" className=\"AppBar\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            Business Cards Manager\n          </Typography>\n        </Toolbar>\n      </AppBar >\n\n      <div  >\n        <NewCard userCards={userCards} setUserCards={setUserCards}/>\n        <hr style={{marginTop: '50px'}} />\n        <YourCards userCards={userCards} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}