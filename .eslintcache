[{"/Users/proRam/Documents/business-cards-manager/src/reportWebVitals.js":"1","/Users/proRam/Documents/business-cards-manager/src/App.js":"2","/Users/proRam/Documents/business-cards-manager/src/index.js":"3"},{"size":362,"mtime":1610963414354,"results":"4","hashOfConfig":"5"},{"size":4542,"mtime":1610978637438,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1610963414352,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4b7uhj",{"filePath":"10","messages":"11","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/proRam/Documents/business-cards-manager/src/reportWebVitals.js",[],"/Users/proRam/Documents/business-cards-manager/src/App.js",["15","16","17","18","19","20","21"],"import React, {useState} from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport './App.css';\n\nfunction imageUpdate( e, setImageFile, setImageURL, setDisplayImage ) {\n  e.preventDefault();\n\n  let reader = new FileReader();\n  let file = e.target.files[0];\n  reader.onloadend = () => {\n    setImageFile(file);\n    setImageURL(reader.result);\n    setDisplayImage(true);\n  };\n  reader.readAsDataURL(file);\n}\n\nfunction CardImage( {src, displayImage} ) {\n\n  if ( displayImage===true ) {\n    return (\n      <>\n        <img src={src} height={200} />\n      </>\n    )\n  } else {\n    return (<></> );\n  }\n\n}\n\nfunction addNewCardToStorage( imageURL,cardName,cardNote,setUserCards ) {\n  \n  let cards = JSON.parse(localStorage.getItem('userCards'));\n  if ( cards==null ){\n    cards = [];\n  }\n  cards.push({imageURL,cardName,cardNote});\n  try {\n    localStorage.setItem('userCards',JSON.stringify(cards));\n  } catch(err) {\n    alert( 'Limit Full' );\n    cards.pop();\n    return null;\n  }\n  alert(\"Card Added Successfully\");\n  setUserCards(cards);\n  return null;\n}\n\nfunction NewCard( {userCards,setUserCards} ) {\n\n  const [image,setImage] = useState(null,imageUpdate);\n  const [imageFile,setImageFile] = useState('');\n  const [imageURL,setImageURL] = useState('');\n  const [displayImage,setDisplayImage] = useState(false);\n  const [cardName,setCardName] = useState('');\n  const [cardNote,setCardNote] = useState('');\n\n  return (\n    <div className=\"newCard\">\n\n      <Typography variant=\"h4\" style={{ paddingBottom: '20px'}} >\n        Add a new Card\n      </Typography>\n\n      <Button variant=\"contained\" component=\"label\" >\n        Upload Card image\n        <input type=\"file\" hidden onChange={(e) => imageUpdate(e,setImageFile,setImageURL,setDisplayImage) } accept=\"image/*\"/>\n      </Button>\n\n      <br/>\n  \n      <form className=\"NewCard__form\" >\n        <CardImage src={imageURL} displayImage={displayImage} />\n          <br /><br />\n        <TextField id=\"name\" label=\"Name\" variant=\"outlined\" \n          onChange={(e) => {setCardName(e.target.value)} } />\n          <br /><br />\n        <TextField id=\"note\" label=\"Note\" variant=\"outlined\" multiline rows={4} \n          onChange={(e) => {setCardNote(e.target.value)} } />\n          <br /><br />\n        <Button variant=\"contained\" component=\"label\" color=\"primary\"\n          onClick={ (e) => {addNewCardToStorage( imageURL,cardName,cardNote,setUserCards )} }\n        > \n          Add Card </Button>\n\n      </form>\n\n    </div>\n  );\n\n}\n\nfunction YourCards( {userCards} ) {\n  \n  if ( userCards==null ){\n    userCards = [];\n  }\n  return (\n      <div className=\"yourCards\" >\n       <Typography variant=\"h4\">\n        Your Cards\n      </Typography>\n\n      <div className=\"yourCards__list\">\n        { userCards.map( (card) => {\n          return (\n            <Card className=\"yourCards__Card\">\n              <CardActionArea>\n                <img\n                  className=\"yourCards__Card--CardMedia\"\n                  src={card['imageURL']}\n                  title={card['cardName']}\n                />\n              </CardActionArea>\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {card['cardName']}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {card['cardNote']}\n              </Typography>\n            </CardContent>\n            </Card>\n          )\n        } ) }\n      </div>\n      </div>\n  )\n}\n\nfunction App() {\n  const [userCards,setUserCards] = useState( JSON.parse(localStorage.getItem('userCards')) );\n\n  return (\n    <div className=\"App\">\n\n      <AppBar position=\"static\" className=\"AppBar\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            Business Cards Manager\n          </Typography>\n        </Toolbar>\n      </AppBar >\n\n      <div  >\n        <NewCard userCards={userCards} setUserCards={setUserCards}/>\n        <hr style={{marginTop: '50px'}} />\n        <YourCards userCards={userCards} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/proRam/Documents/business-cards-manager/src/index.js",[],{"ruleId":"22","severity":1,"message":"23","line":11,"column":8,"nodeType":"24","messageId":"25","endLine":11,"endColumn":19},{"ruleId":"22","severity":1,"message":"26","line":13,"column":8,"nodeType":"24","messageId":"25","endLine":13,"endColumn":17},{"ruleId":"27","severity":1,"message":"28","line":35,"column":9,"nodeType":"29","endLine":35,"endColumn":39},{"ruleId":"22","severity":1,"message":"30","line":65,"column":10,"nodeType":"24","messageId":"25","endLine":65,"endColumn":15},{"ruleId":"22","severity":1,"message":"31","line":65,"column":16,"nodeType":"24","messageId":"25","endLine":65,"endColumn":24},{"ruleId":"22","severity":1,"message":"32","line":66,"column":10,"nodeType":"24","messageId":"25","endLine":66,"endColumn":19},{"ruleId":"27","severity":1,"message":"28","line":123,"column":17,"nodeType":"29","endLine":127,"endColumn":19},"no-unused-vars","'CardActions' is defined but never used.","Identifier","unusedVar","'CardMedia' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","'imageFile' is assigned a value but never used."]